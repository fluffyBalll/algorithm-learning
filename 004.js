// 小明生成了
// N个1到500之间的随机整数。请你删去其中重复的数字，即相同的数字只保留一个，把其余相同的数去
// 掉，然后再把这些数从小到大排序，按照排好的顺序输出。
// 数据范围： 

// 1≤n≤1000  

// 输入的数字大小满足 
// 1≤val≤500 
// 输入描述：
// 第一行先输入随机整数的个数 N 。 接下来的 N 行每行输入一个整数，代表小明生成的随机数。 具体格式可以参考下面的"示例"。
// 输出描述：
// 输出多行，表示输入数据处理后的结果

// 需求： 去重，排序
// 数组去重：第一时间的想法 set 循环 

// filter 方法，浅拷贝数组的一部分，回调函数返回true保留元素
// indexOf 返回元素第一次出现的索引，如果没有则返回-1


// tips: 多行输出log多次就可以了

let arr = [];
arr[5] = 1;
arr[3] = 1;
console.log(arr);
console.log(Object.keys(arr));
// 首先读题可以发现，这道题需要实现排除重复数字以及给剩余非重复数字排序两重工作，如果使用一般的解法，可能
// 需要两个数组，一个负责获取输入数据，一个负责完成筛选数据并排序，这样空间利用率就比较低了。而且这题对数
// 据的限制也比较大，数据n在1000以内，val在500以内，而此时我就觉得可以使用一个简单的哈希思想解决这道题目了
// 。这样只需要一个数组接收数据就行了，以输入的val为key，而有val的数组值不为零，这样一步就能完成排序和排除
// 重复数据两个工作，大大简化代码步骤，唯一不好的就是需要按最大的数作为循环次数来遍历数组，这样时间复杂度就
// 相对来说比较高了，但是只需要一个数组作为存储空间，这样空间复杂度较低，总之感觉是一种简单哈希的应用吧，即
// 把普通数字数组的下标作为key，相应的值作为一个标识。以下是相应代码：

// js中数组其实就是整数属性的对象，会自动给整数属性进行排序
// 这种解法既去重又排序，利用了js特性，空间复杂度底
const obj = {};
obj[5] = 1;
obj[3] = 1;
console.log(obj); // {3: 1, 5: 1}

5 
1
3
4
2
2